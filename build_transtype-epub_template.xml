<project name="dita2epub" default="dita2epub"
  xmlns:dita="http://dita-ot.sourceforge.net"
  xmlns:if="ant:if"
  xmlns:unless="ant:unless"
  >

  <target name="epub.init">
    <!-- test to see where the plugin is located, plugins or demo -->
    <dirname property="epub.dir" file="${ant.file.dita2epub}"/>
    
    <!-- Global properties that affect the base Toolkit processing: -->

    <condition property="topics.output.dir" value="topics">
      <not>
        <isset property="topics.output.dir"/>
      </not>
    </condition>
    
    <condition property="preprocess.maplink.skip" value="true">
      <isset property="epub.exclude.auto.rellinks" />
    </condition>
    <condition property="preprocess.move-links.skip" value="true">
      <isset property="epub.exclude.auto.rellinks" />
    </condition>
    
    <!-- property that when set will prevent the DITA-OT OOTB CSS from being copied
for inclusion in the epub file -->
    <condition property="system.copycss.no">
      <and>
        <isset property="epub.copy.system.css"/>
        <isfalse value="${epub.copy.system.css}"/>
      </and>
    </condition>
  </target>
  
	<target name="dita2epub"
    unless="noMap"
    xmlns:dita="http://dita-ot.sourceforge.net"
		dita:depends="
		epub.init,
		d4p.map-driven-build-init,
		build-init,
		preprocess,
		epub"
    dita:extension="depends org.dita.dost.platform.InsertDependsAction">
  </target>

  <target name="epub"
    unless="noMap"
    depends="dita.map.epub, zipepub"/>

  <target name="checkAnt1.9">
    <antversion property="ant.version"/>
    <condition property="isAnt1.9">
      <antversion atleast="1.9.1" />
    </condition>
  </target>

  <target name="zipepub" depends="checkAnt1.9, zipEpubOldAnt, zipEpubNewAnt"/>

  <target name="zipEpubNewAnt" if:set="${isAnt1.9}">
    <!-- Two steps because mimetype must go in first,
      uncompressed. Looks like ant puts later zipped files in
      first, so mimetype is in second zip task. -->
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"      
      compress="true"
      >
      <!-- Default includes: stuff that we know should legitimately be 
           in any EPUB and is unlikely to get in the epub-temp directory
           by accident.
        -->
      <fileset dir="${epub.temp.dir}"
        includes="META-INF${file.separator}*.xml,toc.ncx,
        content.opf,container.opf,**/*.html,**/*.xhtml,**/*.css,**/*.HTML,**/*.CSS,
        **/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.svg,**/*.mp4,**/*.mp3,**/*.m4a,
        **/*.JPG,**/*.JPEG,**/*.GIF,**/*.PNG,**/*.SVG,**/*.MP4,**/*.MP3,**/*.M4A, 
        **/*.ttf, **/*.ttc, **/*.otf, **/*.otc, *.woff,
        **/*.TTF, **/*.TTC, **/*.OTF, **/*.OTC, *.WOFF,
        **/*.js,**/*.JS
        "/>
      <!-- Extension point to add additional includes or excludes as 
           needed.
        -->
      <dita:extension id="d4p.epub.zip.fileset" behavior="org.dita.dost.platform.InsertAction"/>
    </zip>
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"
      basedir="${epub.temp.dir}"
      includes="mimetype"
      update="true"
    	keepcompression="true"
    	compress="false"
    	createunicodeextrafields="never"
    	zip64Mode="never"
    />
    <!-- For Ant 1.9 or newer, need to specify zip64Mode="never" -->
  </target>

  <target name="zipEpubOldAnt" unless="${isAnt1.9}">

    <echo>- [WARN] Using ${ant.version}. You must use 1.9.1 or newer to produce a correct EPUB Zip package.</echo>
    <echo>- [WARN] EPUB will not pass epubcheck.</echo>
    <!-- Two steps because mimetype must go in first,
      uncompressed. Looks like ant puts later zipped files in
      first, so mimetype is in second zip task. -->
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"
      basedir="${epub.temp.dir}"
    	compress="true"
      includes="META-INF${file.separator}*.xml,toc.ncx,
      content.opf,container.opf,**/*.html,**/*.xhtml,**/*.css,**/*.HTML,**/*.CSS,
      **/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.svg,
      **/*.JPG,**/*.JPEG,**/*.GIF,**/*.PNG,**/*.SVG,
      **/*.MP4,**/*.MP3,**/*.M4A, 
      **/*.mp4,**/*.mp3,**/*.m4a,
      **/*.ttf, **/*.ttc, **/*.otf, **/*.otc, *.woff,
      **/*.TTF, **/*.TTC, **/*.OTF, **/*.OTC, *.WOFF,
      **/*.js,**/*.JS
      "/>
    <zip destfile="${output.dir}${file.separator}${dita.map.filename.root}.epub"
      basedir="${epub.temp.dir}"
      includes="mimetype"
      update="true"
    	keepcompression="true"
    	compress="false"
    	createunicodeextrafields="never"
    />

  </target>


  <target name="epub.xhtml.init">
    
    <property name="epub.temp.dir" value="${dita.temp.dir}${file.separator}epub_temp"/>
    
    <!-- Defines the @class value to use for topic elements generated for topicheads. -->
    <condition property="title.only.topic.class.spec" value="- topic/topic ">
      <not>
        <isset property="title.only.topic.class.spec" />
      </not>
    </condition>    
    
    <condition property="title.only.topic.title.class.spec" value="- topic/title ">
      <not>
        <isset property="title.only.topic.title.class.spec" />
      </not>
    </condition>
    
    <condition property="topics.output.dir" value="topics">
      <not>
        <isset property="topics.output.dir"/>
      </not>
    </condition>
    
    <!-- The name of the directory, within the output package, to contain all images: -->
    
    <condition property="images.output.dir" value="images">
      <not>
        <isset property="images.output.dir" />
      </not>
    </condition>
    
    <!-- NOTE: These conditions are copied from the OT 2.x
         build_general's xhtml.init target. They are required
         to enable proper CSS copying.
         
      -->
    
    <!-- begin to check and init css relevant properties -->
    <condition property="user.csspath.url">
      <or>
        <contains string="${args.csspath}" substring="http://"/>
        <contains string="${args.csspath}" substring="https://"/>
      </or>
    </condition>
    <condition property="args.csspath.absolute">
      <isabsolute path="${args.csspath}"/>
    </condition>
    <!-- Set the csspath as default empty directory when there is no user
      input csspath or user input csspath is a local absolute path. -->
    <condition property="user.csspath" value="">
      <or>
        <not>
          <isset property="args.csspath"/>
        </not>
        <isset property="args.csspath.absolute"/>
      </or>
    </condition>
    <condition property="user.csspath" value="${args.csspath}/">
      <not>
        <isset property="user.csspath"/>
      </not>
    </condition>
    <condition property="args.css.real" value="${args.cssroot}${file.separator}${args.css}">
      <isset property="args.cssroot"/>
    </condition>
    <condition property="args.css.real" value="${args.css}">
      <not>
        <isset property="args.cssroot"/>
      </not>
    </condition>
    <available file="${args.css.real}" property="args.css.present" type="file"/>
    <basename property="args.css.file.temp" file="${args.css}"/>
    <condition property="args.css.file" value="${args.css.file.temp}">
      <or>
        <isset property="args.css.present"/>
        <isset property="user.csspath.url"/>
      </or>
    </condition>
    <property name="css.output.dir" value="${user.csspath}"/>
  </target>

  <target name="dita.map.epub" depends="epub.xhtml.init, epub-copy-css"
  	description="Generate all ePub components from input map and topics">
    
    <echo>dita.map.epub: Starting...</echo>

  	<mkdir dir="${epub.temp.dir}"/>
  	<makeurl file="${epub.temp.dir}" property="epub.xslt.outdir"/>
  	<makeurl file="${dita.temp.dir}" property="epub.xslt.tempdir"/>
  	<makeurl file="${cover.graphic.file}" property="cover.graphic.uri" validate="false"/>
    <!-- See PDF2 build file -->
    <makeurl property="work.dir.url" file="${dita.temp.dir}" validate="no"/>
    
  	<property name="args.xsl" location="${epub.dir}/xsl/map2epub.xsl"/>
    <makeurl file="${dita.input.valfile}" property="dita.input.valfile.url" validate="no"></makeurl>
    <makeurl file="${epub.font.manifest}"  property="epub.font.manifest.url" validate="no"/>

   <!--This property is no longer defined in DITA OT 2.x-->
   <dirname property="dita.input.dirname" file="${args.input}" />
  	<!-- NOTE: since we're not using the direct output of the base XSLT transform we just
  	     set the output directory to the temp dir where it will be ignored.
  	  -->
    <!--<sysproperty key="OT_VERSION" value="${otversion}"/>-->
      
<!--      <xslt destdir="${epub.temp.dir}"
        reloadstylesheet="${dita.html5.reloadstylesheet}"
        extension=".xhtml"
        style="${args.xsl}"
        filenameparameter="FILENAME"
        filedirparameter="FILEDIR"
        parallel="${parallel}">
-->
    <pipeline message="Convert DITA map to EPUB" taskname="xslt">
      <xslt
      destdir="${dita.temp.dir}"
      style="${args.xsl}">      
      <ditafileset input="true" format="ditamap"/>        
      <param name="work.dir.url" expression="${work.dir.url}"/>
      <param name="cssOutputDir" expression="${css.output.dir}"/>
      <param name="copySystemCssNo" expression="${system.copycss.no}" if:set="system.copycss.no"/>
      <param name="debug" expression="${debug}"/>
      <param name="coverGraphicUri" expression="${cover.graphic.uri}" if:set="cover.graphic.file"/>
      <param name="idURIStub" expression="${epub.pubid.uri.stub}" if:set="epub.pubid.uri.stub"/>
      <param name="imagesOutputDir" expression="${images.output.dir}" if:set="images.output.dir"/>
      <param name="outdir" expression="${epub.xslt.outdir}"/>
      <param name="inputdir" expression="${dita.input.dirname}"/>
      <param name="outext" expression=".xhtml"/><!-- EPUB3 uses xhtml for result files. -->
      <param name="tempdir" expression="${epub.xslt.tempdir}"/>
      <param name="fileOrganizationStrategy" expression="${html2.file.organization.strategy}"
                                                if:set="html2.file.organization.strategy"/>

      <param name="rawPlatformString" expression="${os.name}"/>
      <param name="titleOnlyTopicClassSpec" expression="${title.only.topic.class.spec}"/>
      <param name="titleOnlyTopicTitleClassSpec" expression="${title.only.topic.title.class.spec}"/>
      <param name="topicsOutputDir" expression="${topics.output.dir}"/>
      <param name="fontsOutputDir" expression="${epub.fonts.output.dir}" if:set="epub.fonts.output.dir"/>
      <param name="generateGlossary" expression="${html2.generate.glossary}" if:set="html2.generate.glossary"/>
      <param name="generateHtmlToc" expression="${epub.generate.html.toc}" if:set="epub.generate.html.toc"/>
      <param name="generateIndex" expression="${html2.generate.index}" if:set="html2.generate.index"/>
      <param name="html.toc.OUTPUTCLASS" expression="${args.xhtml.toc.class}" if:set="args.xhtml.toc.class" />
      <param name="maxTocDepth" expression="${d4p.max.toc.depth}" if:set="d4p.max.toc.depth"/>
      <param name="maxNavDepth" expression="${d4p.max.nav.depth}" if:set="d4p.max.nav.depth"/>
      <param name="epubType" expression="${d4p.epubtype}" if:set="d4p.epubtype"/>
      <param name="epubFontManifestUri" expression="${epub.font.manifest.url}" if:set="epub.font.manifest" />    
      <param name="obfuscateFonts" expression="${epub.obfuscate.fonts}" if:set="epub.obfuscate.fonts"/>
      <param name="epubGenerateCSSFontRules" expression="${epub.generate.css.font.rules}" if:set="epub.generate.css.font.rules"/>
      <param name="javaScriptSourceFile" expression="${epub.javascript.file}" if:set="epub.javascript.file"/>
      <param name="javaScriptOutputDir" expression="${epub.javascript.dir}" if:set="epub.javascript.dir"/>
      
      <!-- Parameters from dita2xhtml and similar transtypes: -->
      <param name="WORKDIR" expression="${workdir}" if:set="workdir"/>
      <param name="BASEDIR" expression="${basedir}"></param>
      <param name="CSS" expression="${args.css.file}" if:set="args.css.file" />
      <param name="CSSPATH" expression="${user.csspath}" if:set="user.csspath" />
      <param name="DRAFT" expression="${args.draft}" if:set="args.draft"></param>
      <param name="ARTLBL" expression="${args.artlbl}" if:set="args.artlbl"></param>
      <param name="GENERATE-TASK-LABELS" expression="${args.gen.task.lbl}" if:set="args.gen.task.lbl"></param>
      <param name="PRESERVE-DITA-CLASS" expression="${args.xhtml.classattr}" if:set="args.xhtml.classattr"></param>
      <param name="NOPARENTLINK" expression="${epub.hide.parent.link}" />
      <param name="BREADCRUMBS" expression="${args.breadcrumbs}" if:set="args.breadcrumbs"></param>
      <param name="INDEXSHOW" expression="${args.indexshow}" if:set="args.indexshow"></param>
      <param name="OUTPUTDIR" expression="${epub.temp.dir}"/>
      <param name="FILEDIR" expression="."/>
      <param name="FILTERFILE" expression="${dita.input.valfile.url}" if:set="dita.input.valfile"></param>
      <param name="DBG" expression="${args.debug}" if:set="args.debug"></param>
      <param name="uplevels" expression="${uplevels}" />
      <param name="TRANSTYPE" expression="${transtype}" />
      <param name="HDF" expression="${args.hdf}" if:set="args.hdf" />
      <param name="HDR" expression="${args.hdr}" if:set="args.hdr" />
      <param name="FTR" expression="${args.ftr}" if:set="args.ftr" />      
      <param name="include.rellinks" expression="${include.rellinks}"/>
      <param name="genDefMeta" expression="${args.gen.default.meta}" if:set="args.gen.default.meta" />
      <param name="OUTEXT" expression="${out.ext}" if:set="out.ext" />
      <param name="defaultLanguage" expression="${default.language}"/>

      <dita:extension id="d4p.epub.xslt.param" behavior="org.dita.dost.platform.InsertAction"/>
      <dita:extension id="dita.conductor.xhtml.param" behavior="org.dita.dost.platform.InsertAction"/>
      <dita:extension id="d4p.common.html.param" behavior="org.dita.dost.platform.InsertAction"/>

      <xmlcatalog refid="dita.catalog"></xmlcatalog>
    </xslt>
    </pipeline>
    
    <echo>dita.map.epub: Calling epub.copy.graphics:</echo>
    
  	<antcall target="epub.copy.graphics"/>
    
    <echo>dita.map.epub: Done</echo>
    
  </target>

  <target name="epub.copy.graphics"
	  description="Copies graphics from input to the ePub output directory based on the graphic map generated during epub generation">
  	<ant antfile="${epub.temp.dir}/copy-graphics.xml"
  		>
  	</ant>
	</target>

  <target name="epub-copy-css"  description="Copy CSS files">
    
    <condition property="user.copycss.yes">
      <isset property="args.css.present"/>
    </condition>
        
    <property name="user.csspath.real" value="${epub.temp.dir}/${css.output.dir}"/>
  	<echo message="Copying css files to '${user.csspath.real}"/>
    <mkdir dir="${user.csspath.real}"/>
    <!-- Copy system default css files unless system.copycss.no is set -->
    <antcall target="epub-copy-css-system"/>
    <!-- Copy user specified css file when required -->
    <antcall target="epub-copy-css-user"/>
    
    <!-- Copy kindle css if being triggered by the kindle plugin -->
    <antcall target="epub-copy-css-kindle" />
  </target>

  <target name="epub-copy-css-system" unless="${system.copycss.no}">
    <echo>copying system CSS files to directory "${user.csspath.real}" [system.copycss.no='${system.copycss.no}']</echo>
    <copy todir="${user.csspath.real}">
      <fileset dir="${dita.plugin.org.dita.html5.dir}/css" includes="*.css"/>
    </copy>
  </target>

  <!-- FIXME: moving to if:set breaks this check (succeeds when it should fail) -->
  <target name="epub-copy-css-user" if="${user.copycss.yes}">
    <echo>Copying user CSS "${args.css.real}" to directory "${user.csspath.real}"...</echo>
    
    <copy file="${args.css.real}" todir="${user.csspath.real}"/>
  </target>
  
  <!-- FIXME: Changing @if to @if:set breaks this check (check succeeds when it should fail) --> 
  <target name="epub-copy-css-kindle" if="css.include.kindle">
    <copy file="${dita.plugin.org.dita4publishers.kindle.dir}/css/kindleExtensions.css" todir="${user.csspath.real}"/>
  </target>
  
  <target name="epub-obfuscate-font">
    <java jar="${dita.plugin.org.dita4publishers.epub.dir}/lib/epub-font-obfuscator.jar"
      fork="true"
      >
      <arg value="${font.obfuscate.obfuscationkey}"/>
      <arg value="${font.obfuscate.inputfont}"/>
      <arg value="${font.obfuscate.resultfont}"/>
    </java>
  </target>
  
</project>
